/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main.AdminFrames.AdminActionScreens.CreateUserSubPanel;

import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;

import main.util.API_AdminActions.API_Admin_UsersApplications.API_Admin_InstructorApplications;
import main.util.models.ButtonColumnHelper;
import main.util.models.ButtonStyler;
import main.util.models.ComboBoxModels;
import main.util.models.DataTables;
import main.util.models.UsersModels.InstructorModel;

/**
 *
 * @author usuario
 */
public class CreateInstructorSubPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateInstructorSubPanel
     */
    DefaultComboBoxModel<String> yearModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> mesModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> diaModel = new DefaultComboBoxModel<>();
    DefaultTableModel modeloTabla = new DefaultTableModel(
            new Object[] {"Ficha", "Programa de Formación", "Nivel de Formación", "Jornada de Formación", "Sede", "Área", "Eliminar"},
            0  // Número de filas iniciales
    );

    public CreateInstructorSubPanel() {
        initComponents();
        aditionalConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateInstructorSubPanel = new javax.swing.JPanel();
        ConfirmarRegistroUsuario = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        ResidenciaHolder = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        FechaHolder = new javax.swing.JTextField();
        DiaCB = new javax.swing.JComboBox<>();
        MesCB = new javax.swing.JComboBox<>();
        RegistrarArea = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        RegistrarNombres = new javax.swing.JTextField();
        RegistrarSede = new javax.swing.JTextField();
        RegistrarPass = new javax.swing.JTextField();
        RegistrarNivelFormacion = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        GeneroCB = new javax.swing.JComboBox<>();
        RegistrarUsuario = new javax.swing.JTextField();
        TipoDocCB = new javax.swing.JComboBox<>();
        RegistrarDocumento = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        RegistrarApellidos = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        MunicipioCB = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        BarrioCB = new javax.swing.JComboBox<>();
        RegistrarCorreo = new javax.swing.JTextField();
        DepartamentoCB = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        RegistrarJornadaFormacion = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        YearCB = new javax.swing.JComboBox<>();
        RegistrarTelefono = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        FichaCB = new javax.swing.JComboBox<>();
        RegistrarProgramaFormacion = new javax.swing.JTextField();
        AsociarFicha = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        FichasAsociadasTB = new javax.swing.JTable();

        CreateInstructorSubPanel.setBackground(new java.awt.Color(255, 255, 255));

        ConfirmarRegistroUsuario.setBackground(new java.awt.Color(0, 34, 64));
        ConfirmarRegistroUsuario.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ConfirmarRegistroUsuario.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmarRegistroUsuario.setText("Crear nuevo Instructor");
        ConfirmarRegistroUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmarRegistroUsuarioActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 0));
        jLabel27.setText("Usuario");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Sede");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("Genero");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Tipo de documento");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("Apellidos");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("Nombres");

        ResidenciaHolder.setEditable(false);
        ResidenciaHolder.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResidenciaHolder.setForeground(new java.awt.Color(0, 0, 0));
        ResidenciaHolder.setFocusable(false);

        jLabel40.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 0, 0));
        jLabel40.setText("Nivel de formacion");

        FechaHolder.setEditable(false);
        FechaHolder.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        FechaHolder.setForeground(new java.awt.Color(0, 0, 0));
        FechaHolder.setFocusable(false);

        DiaCB.setForeground(new java.awt.Color(0, 0, 0));
        DiaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DiaCB.setEnabled(false);
        DiaCB.setPreferredSize(new java.awt.Dimension(64, 28));
        DiaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaCBActionPerformed(evt);
            }
        });

        MesCB.setForeground(new java.awt.Color(0, 0, 0));
        MesCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        MesCB.setEnabled(false);
        MesCB.setPreferredSize(new java.awt.Dimension(64, 28));
        MesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MesCBActionPerformed(evt);
            }
        });

        RegistrarArea.setEditable(false);
        RegistrarArea.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarArea.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarArea.setFocusable(false);
        RegistrarArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarAreaActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 0));
        jLabel29.setText("Correo");

        RegistrarNombres.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarNombres.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RegistrarNombresKeyTyped(evt);
            }
        });

        RegistrarSede.setEditable(false);
        RegistrarSede.setFocusable(false);

        RegistrarPass.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarPass.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarPassActionPerformed(evt);
            }
        });

        RegistrarNivelFormacion.setEditable(false);
        RegistrarNivelFormacion.setFocusable(false);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Contraseña");

        GeneroCB.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        GeneroCB.setForeground(new java.awt.Color(0, 0, 0));
        GeneroCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        GeneroCB.setPreferredSize(new java.awt.Dimension(64, 28));
        GeneroCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroCBActionPerformed(evt);
            }
        });

        RegistrarUsuario.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarUsuario.setForeground(new java.awt.Color(0, 0, 0));

        TipoDocCB.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        TipoDocCB.setForeground(new java.awt.Color(0, 0, 0));
        TipoDocCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TipoDocCB.setPreferredSize(new java.awt.Dimension(64, 28));
        TipoDocCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoDocCBActionPerformed(evt);
            }
        });

        RegistrarDocumento.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarDocumento.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RegistrarDocumentoKeyTyped(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 0, 0));
        jLabel41.setText("Programa de Formacion");

        RegistrarApellidos.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarApellidos.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RegistrarApellidosKeyTyped(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 0, 0));
        jLabel38.setText("Numero de ficha");

        MunicipioCB.setForeground(new java.awt.Color(0, 0, 0));
        MunicipioCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        MunicipioCB.setEnabled(false);
        MunicipioCB.setPreferredSize(new java.awt.Dimension(64, 28));
        MunicipioCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MunicipioCBActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Documento");

        BarrioCB.setForeground(new java.awt.Color(0, 0, 0));
        BarrioCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BarrioCB.setEnabled(false);
        BarrioCB.setPreferredSize(new java.awt.Dimension(64, 28));
        BarrioCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarrioCBActionPerformed(evt);
            }
        });

        RegistrarCorreo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarCorreo.setForeground(new java.awt.Color(0, 0, 0));

        DepartamentoCB.setForeground(new java.awt.Color(0, 0, 0));
        DepartamentoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DepartamentoCB.setPreferredSize(new java.awt.Dimension(64, 28));
        DepartamentoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepartamentoCBActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("Residencia");

        RegistrarJornadaFormacion.setEditable(false);
        RegistrarJornadaFormacion.setFocusable(false);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("Area de trabajo");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("Telefono");

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(0, 0, 0));
        jLabel39.setText("Jornada de formacion");

        YearCB.setForeground(new java.awt.Color(0, 0, 0));
        YearCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        YearCB.setPreferredSize(new java.awt.Dimension(64, 28));
        YearCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearCBActionPerformed(evt);
            }
        });

        RegistrarTelefono.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RegistrarTelefono.setForeground(new java.awt.Color(0, 0, 0));
        RegistrarTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RegistrarTelefonoKeyTyped(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));
        jLabel25.setText("Fecha de Nacimiento");

        FichaCB.setForeground(new java.awt.Color(0, 0, 0));
        FichaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        FichaCB.setPreferredSize(new java.awt.Dimension(64, 28));
        FichaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FichaCBActionPerformed(evt);
            }
        });

        RegistrarProgramaFormacion.setEditable(false);
        RegistrarProgramaFormacion.setFocusable(false);

        AsociarFicha.setBackground(new java.awt.Color(57, 169, 0));
        AsociarFicha.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        AsociarFicha.setForeground(new java.awt.Color(255, 255, 255));
        AsociarFicha.setText("AsociarFicha");
        AsociarFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AsociarFichaActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fichas Asociadas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        FichasAsociadasTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        FichasAsociadasTB.setFocusable(false);
        FichasAsociadasTB.setRequestFocusEnabled(false);
        FichasAsociadasTB.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(FichasAsociadasTB);

        javax.swing.GroupLayout CreateInstructorSubPanelLayout = new javax.swing.GroupLayout(CreateInstructorSubPanel);
        CreateInstructorSubPanel.setLayout(CreateInstructorSubPanelLayout);
        CreateInstructorSubPanelLayout.setHorizontalGroup(
            CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28))
                        .addGap(67, 67, 67)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TipoDocCB, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RegistrarNombres, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RegistrarApellidos, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RegistrarPass)
                            .addComponent(RegistrarUsuario)))
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(120, 120, 120)
                        .addComponent(RegistrarDocumento))
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29)
                            .addComponent(jLabel18)
                            .addComponent(jLabel23)
                            .addComponent(jLabel25))
                        .addGap(56, 56, 56)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                                .addComponent(YearCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DiaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FechaHolder))
                            .addComponent(GeneroCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RegistrarTelefono)
                            .addComponent(RegistrarCorreo)
                            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                                .addComponent(DepartamentoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MunicipioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BarrioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResidenciaHolder))))
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(85, 85, 85)
                        .addComponent(FichaCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AsociarFicha, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ConfirmarRegistroUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel17))
                                .addGap(95, 95, 95)
                                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RegistrarArea)
                                    .addComponent(RegistrarSede)))
                            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel40)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel41))
                                .addGap(33, 33, 33)
                                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(RegistrarNivelFormacion, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RegistrarProgramaFormacion, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RegistrarJornadaFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 773, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        CreateInstructorSubPanelLayout.setVerticalGroup(
            CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(9, 9, 9)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19))
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addComponent(RegistrarPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RegistrarDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipoDocCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel25)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(YearCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DiaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(FechaHolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GeneroCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RegistrarTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(RegistrarCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DepartamentoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MunicipioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BarrioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ResidenciaHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(FichaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AsociarFicha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CreateInstructorSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel41)
                            .addComponent(RegistrarProgramaFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(RegistrarNivelFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39)
                            .addComponent(RegistrarJornadaFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24)
                            .addComponent(RegistrarArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreateInstructorSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(RegistrarSede, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfirmarRegistroUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CreateInstructorSubPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CreateInstructorSubPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
        public void aditionalConfig(){
            try {
                ButtonStyler buttonStyler = new ButtonStyler();
                buttonStyler.applyPrimaryStyle(AsociarFicha);
                yearModel.addElement("Seleccionar Año");
                llenarYear(yearModel);
                mesModel.addElement("Seleccionar Mes");
                diaModel.addElement("Seleccionar Día");
                FichasAsociadasTB.setModel(modeloTabla);
                ComboBoxModels CBModels = new ComboBoxModels();
                TipoDocCB.setModel(CBModels.generarComboBoxModelPorTipo("TipoDocumento"));
                GeneroCB.setModel(CBModels.generarComboBoxModelPorTipo("Genero"));
                MunicipioCB.setModel(CBModels.generarComboBoxModelPorTipo("Municipios"));
                DepartamentoCB.setModel(CBModels.generarComboBoxModelPorTipo("Departamentos"));
                BarrioCB.setModel(CBModels.generarComboBoxModelPorTipo("Barrios"));
                FichaCB.setModel(CBModels.generarComboBoxModelPorTipo("Fichas"));
                YearCB.setModel(yearModel);
                MesCB.setModel(mesModel);
                DiaCB.setModel(diaModel);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
        
         private void llenarYear(DefaultComboBoxModel<String> anhoModel) {
        int anhoActual = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = anhoActual; i > anhoActual - 100; i--) {
            anhoModel.addElement(String.valueOf(i));
        }
    }

    public void llenarMeses() {
        mesModel.removeAllElements();
        mesModel.addElement("Seleccionar Mes");
        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
                "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
        for (String mes : meses) {
            mesModel.addElement(mes);
        }
    }

    private void llenarDias(DefaultComboBoxModel<String> diaModel, int anho, int mes) {
        diaModel.removeAllElements();
        diaModel.addElement("Seleccionar Día");
        int diasEnMes = obtenerDiasDelMes(anho, mes);
        for (int i = 1; i <= diasEnMes; i++) {
            diaModel.addElement(String.valueOf(i));
        }
    }

    private int obtenerDiasDelMes(int anho, int mes) {
        switch (mes) {
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                return 31;
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return (anho % 4 == 0 && (anho % 100 != 0 || anho % 400 == 0)) ? 29 : 28;
            default:
                return 30;
        }
    }

    private int obtenerNumeroMes(String mesSeleccionado) {
        switch (mesSeleccionado) {
            case "Enero": return 1;
            case "Febrero": return 2;
            case "Marzo": return 3;
            case "Abril": return 4;
            case "Mayo": return 5;
            case "Junio": return 6;
            case "Julio": return 7;
            case "Agosto": return 8;
            case "Septiembre": return 9;
            case "Octubre": return 10;
            case "Noviembre": return 11;
            case "Diciembre": return 12;
            default: return -1; // En caso de error
        }
    }

    private void actualizarFecha() {
        String anhoSeleccionado = (String) YearCB.getSelectedItem();
        String mesSeleccionado = (String) MesCB.getSelectedItem();
        String diaSeleccionado = (String) DiaCB.getSelectedItem();

        // Comprobar si los tres elementos han sido seleccionados correctamente
        if (anhoSeleccionado != null && !anhoSeleccionado.equals("Seleccionar Año") &&
                mesSeleccionado != null && !mesSeleccionado.equals("Seleccionar Mes") &&
                diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar Día")) {

            // Convertir el nombre del mes a su número usando obtenerNumeroMes()
            int numeroMes = obtenerNumeroMes(mesSeleccionado);
            String mesConFormato = (numeroMes < 10 ? "0" : "") + numeroMes; // Formatear el mes con cero si es necesario
            String diaConFormato = (Integer.parseInt(diaSeleccionado) < 10 ? "0" : "") + diaSeleccionado; // Formatear el día con cero si es necesario

            // Mostrar la fecha en formato "yyyy-MM-dd"
            FechaHolder.setText(anhoSeleccionado + "-" + mesConFormato + "-" + diaConFormato);
        } else {
            // Si alguno no está seleccionado, mostrar el campo vacío o parcialmente seleccionado
            String fechaParcial = "";
            if (anhoSeleccionado != null && !anhoSeleccionado.equals("Seleccionar Año")) {
                fechaParcial += anhoSeleccionado;
            }
            if (mesSeleccionado != null && !mesSeleccionado.equals("Seleccionar Mes")) {
                int numeroMes = obtenerNumeroMes(mesSeleccionado);
                String mesConFormato = (numeroMes < 10 ? "0" : "") + numeroMes; // Formatear el mes con cero si es necesario
                if (!fechaParcial.isEmpty()) {
                    fechaParcial += "-";  // Solo añadir el guion si ya hay algo en la fecha parcial
                }
                fechaParcial += mesConFormato;
            }
            if (diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar Día")) {
                String diaConFormato = (Integer.parseInt(diaSeleccionado) < 10 ? "0" : "") + diaSeleccionado; // Formatear el día con cero si es necesario
                if (!fechaParcial.isEmpty()) {
                    fechaParcial += "-";  // Solo añadir el guion si ya hay algo en la fecha parcial
                }
                fechaParcial += diaConFormato;
            }
            FechaHolder.setText(fechaParcial); // Mostrar la selección parcial
        }
    }
    
    private void actualizarResidencia() {
        String departamentoSeleccionado = (String) DepartamentoCB.getSelectedItem();
        String municipioSeleccionado = (String) MunicipioCB.getSelectedItem();
        String barrioSeleccionado = (String) BarrioCB.getSelectedItem();

        // Comprobar si los tres elementos han sido seleccionados correctamente
        if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...") &&
            municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...") &&
            barrioSeleccionado != null && !barrioSeleccionado.equals("Seleccionar...")) {

            // Mostrar la residencia en formato "Departamento - Municipio - Barrio"
            ResidenciaHolder.setText(departamentoSeleccionado + " - " + municipioSeleccionado + " - " + barrioSeleccionado);
        } else {
            // Si alguno no está seleccionado, mostrar el campo parcial
            String residenciaParcial = "";
            if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...")) {
                residenciaParcial += departamentoSeleccionado;
            }
            if (municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...")) {
                if (!residenciaParcial.isEmpty()) {
                    residenciaParcial += " - ";  // Solo añadir el separador si hay un valor previo
                }
                residenciaParcial += municipioSeleccionado;
            }
            if (barrioSeleccionado != null && !barrioSeleccionado.equals("Seleccionar...")) {
                if (!residenciaParcial.isEmpty()) {
                    residenciaParcial += " - ";  // Solo añadir el separador si hay un valor previo
                }
                residenciaParcial += barrioSeleccionado;
            }
            ResidenciaHolder.setText(residenciaParcial);  // Mostrar la selección parcial
        }
    }

    private void ConfirmarRegistroUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmarRegistroUsuarioActionPerformed
        // Mostrar el diálogo de confirmación
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea registrar los datos?", "Confirmación", JOptionPane.YES_NO_CANCEL_OPTION);

        switch (respuesta) {
            case JOptionPane.YES_OPTION -> {
                // Inicializar variables
                SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
                formatoFecha.setLenient(false); // Validación estricta de la fecha
                java.util.Date fechaNacimientoUtil = null;
                java.sql.Date fechaNacimiento = null;

                // Variable para acumular errores de validación
                StringBuilder errores = new StringBuilder();

                try {
                    // 1. Validación de Campos Obligatorios
                    if (RegistrarUsuario.getText().trim().isEmpty()) {
                        errores.append("- El campo de Usuario es obligatorio.\n");
                    }

                    if (RegistrarPass.getText().trim().isEmpty()) {
                        errores.append("- El campo de Contraseña es obligatorio.\n");
                    }

                    if (RegistrarDocumento.getText().trim().isEmpty()) {
                        errores.append("- El campo de Documento es obligatorio.\n");
                    }

                    if (RegistrarNombres.getText().trim().isEmpty()) {
                        errores.append("- El campo de Nombres es obligatorio.\n");
                    }

                    if (RegistrarApellidos.getText().trim().isEmpty()) {
                        errores.append("- El campo de Apellidos es obligatorio.\n");
                    }

                    if (FechaHolder.getText().trim().isEmpty()) {
                        errores.append("- El campo de Fecha de Nacimiento es obligatorio.\n");
                    }

                    if (RegistrarTelefono.getText().trim().isEmpty()) {
                        errores.append("- El campo de Teléfono es obligatorio.\n");
                    }

                    if (RegistrarCorreo.getText().trim().isEmpty()) {
                        errores.append("- El campo de Correo Electrónico es obligatorio.\n");
                    }

                    if (ResidenciaHolder.getText().trim().isEmpty()) {
                        errores.append("- El campo de Residencia es obligatorio.\n");
                    }

                    if (FichaCB.getSelectedItem() == null) {
                        errores.append("- Debes seleccionar al menos una Ficha.\n");
                    }

                    if (RegistrarProgramaFormacion.getText().trim().isEmpty()) {
                        errores.append("- El campo de Programa de Formación es obligatorio.\n");
                    }

                    if (RegistrarNivelFormacion.getText().trim().isEmpty()) {
                        errores.append("- El campo de Nivel de Formación es obligatorio.\n");
                    }

                    if (RegistrarJornadaFormacion.getText().trim().isEmpty()) {
                        errores.append("- El campo de Jornada de Formación es obligatorio.\n");
                    }

                    if (RegistrarArea.getText().trim().isEmpty()) {
                        errores.append("- El campo de Área es obligatorio.\n");
                    }

                    if (RegistrarSede.getText().trim().isEmpty()) {
                        errores.append("- El campo de Sede es obligatorio.\n");
                    }

                    // 2. Validación de Fecha de Nacimiento
                    if (!FechaHolder.getText().trim().isEmpty()) {
                        try {
                            String fechaTexto = FechaHolder.getText().trim();
                            System.out.println("Fecha ingresada: " + fechaTexto);

                            fechaNacimientoUtil = formatoFecha.parse(fechaTexto);
                            fechaNacimiento = new java.sql.Date(fechaNacimientoUtil.getTime());
                            System.out.println("Fecha convertida a java.sql.Date: " + fechaNacimiento);

                            // Verificar que la fecha no sea futura ni demasiado antigua
                            if (fechaNacimiento.before(java.sql.Date.valueOf("1900-01-01")) || fechaNacimiento.after(new java.sql.Date(System.currentTimeMillis()))) {
                                errores.append("- La Fecha de Nacimiento es inválida.\n");
                            }

                            // Verificar que el usuario tenga al menos 18 años
                            java.util.Calendar cal = java.util.Calendar.getInstance();
                            cal.setTime(fechaNacimientoUtil);
                            cal.add(java.util.Calendar.YEAR, 18);
                            java.util.Date fechaMinima = cal.getTime();
                            if (fechaMinima.after(new java.util.Date())) {
                                errores.append("- Debes tener al menos 18 años para registrarte.\n");
                            }

                        } catch (ParseException e) {
                            errores.append("- La Fecha de Nacimiento debe tener el formato 'yyyy-MM-dd'.\n");
                        }
                    }

                    // 3. Validación de Correo Electrónico con Expresión Regular
                    if (!RegistrarCorreo.getText().trim().isEmpty()) {
                        String correo = RegistrarCorreo.getText().trim();
                        String regexCorreo = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
                        if (!correo.matches(regexCorreo)) {
                            errores.append("- El Correo Electrónico no es válido.\n");
                        }
                    }

                    // 4. Validación de Teléfono (solo números y longitud mínima)
                    if (!RegistrarTelefono.getText().trim().isEmpty()) {
                        String telefono = RegistrarTelefono.getText().trim();
                        String regexTelefono = "^[0-9]{7,15}$"; // Ajusta la longitud según sea necesario
                        if (!telefono.matches(regexTelefono)) {
                            errores.append("- El Teléfono debe contener solo números y tener entre 7 y 15 dígitos.\n");
                        }
                    }

                    // 5. Validación de Documento (solo números y mínimo 4 caracteres)
                    if (!RegistrarDocumento.getText().trim().isEmpty()) {
                        String documento = RegistrarDocumento.getText().trim();
                        if (!documento.matches("^[0-9]{4,}$")) { // Solo números y al menos 4 dígitos
                            errores.append("- El Documento debe contener solo números y tener al menos 4 dígitos.\n");
                        }
                    }

                    // 6. Validación de Contraseña (mínimo 8 caracteres)
                    if (!RegistrarPass.getText().trim().isEmpty()) {
                        String contraseña = RegistrarPass.getText().trim();
                        if (contraseña.length() < 8) {
                            errores.append("- La Contraseña debe tener al menos 8 caracteres.\n");
                        }
                        // Puedes agregar más validaciones si es necesario, como combinaciones de letras y números
                    }

                    // 7. Validación de Ficha (convertir a entero)
                    List<Integer> fichas = new ArrayList<>();
                    if (FichaCB.getSelectedItem() != null) {
                        try {
                            // Suponiendo que FichaCB puede tener múltiples selecciones
                            // Si solo permite una, ajusta el código en consecuencia
                            fichas.add(Integer.parseInt(FichaCB.getSelectedItem().toString()));
                        } catch (NumberFormatException e) {
                            errores.append("- La Ficha seleccionada no es válida.\n");
                        }
                    }


                    // 9. Validación de Programas, Niveles, Jornadas, etc. si es necesario
                    // Puedes agregar más validaciones según tus requerimientos específicos

                    // 10. Verificar si hay errores y mostrarlos
                    if (errores.length() > 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, corrige los siguientes errores:\n" + errores.toString(), "Errores de Validación", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // 11. Capturar los datos de la tabla FichasAsociadasTB
                    DefaultTableModel modeloTabla = (DefaultTableModel) FichasAsociadasTB.getModel();
                    int filasTabla = modeloTabla.getRowCount();

                    List<Integer> fichasList = new ArrayList<>();
                    List<String> programasFormacion = new ArrayList<>();
                    List<String> jornadasFormacion = new ArrayList<>();
                    List<String> nivelesFormacion = new ArrayList<>();
                    List<String> sedesList = new ArrayList<>();
                    List<String> areasList = new ArrayList<>();

                    for (int i = 0; i < filasTabla; i++) {
                        // Validación de cada fila de la tabla
                        try {
                            fichasList.add((Integer) modeloTabla.getValueAt(i, 0)); // Ficha en la columna 0
                        } catch (ClassCastException e) {
                            errores.append("- El valor de Ficha en la fila " + (i + 1) + " no es válido.\n");
                        }

                        String programa = (String) modeloTabla.getValueAt(i, 1);
                        String nivel = (String) modeloTabla.getValueAt(i, 2);
                        String jornada = (String) modeloTabla.getValueAt(i, 3);
                        String sedeFila = (String) modeloTabla.getValueAt(i, 4);
                        String areaFila = (String) modeloTabla.getValueAt(i, 5);

                        // Validar que los campos de la tabla no estén vacíos
                        if (programa == null || programa.trim().isEmpty()) {
                            errores.append("- El Programa de Formación en la fila " + (i + 1) + " es obligatorio.\n");
                        }
                        if (nivel == null || nivel.trim().isEmpty()) {
                            errores.append("- El Nivel de Formación en la fila " + (i + 1) + " es obligatorio.\n");
                        }
                        if (jornada == null || jornada.trim().isEmpty()) {
                            errores.append("- La Jornada de Formación en la fila " + (i + 1) + " es obligatoria.\n");
                        }
                        if (sedeFila == null || sedeFila.trim().isEmpty()) {
                            errores.append("- La Sede en la fila " + (i + 1) + " es obligatoria.\n");
                        }
                        if (areaFila == null || areaFila.trim().isEmpty()) {
                            errores.append("- El Área en la fila " + (i + 1) + " es obligatoria.\n");
                        }

                        programasFormacion.add(programa != null ? programa.trim() : "");
                        nivelesFormacion.add(nivel != null ? nivel.trim() : "");
                        jornadasFormacion.add(jornada != null ? jornada.trim() : "");
                        sedesList.add(sedeFila != null ? sedeFila.trim() : "");
                        areasList.add(areaFila != null ? areaFila.trim() : "");
                    }

                    // Si hubo errores en la tabla, mostrarlos
                    if (errores.length() > 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, corrige los siguientes errores en la tabla Fichas Asociadas:\n" + errores.toString(), "Errores de Validación", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // 12. Crear el objeto InstructorModel con los datos validados
                    InstructorModel instructor = new InstructorModel(
                            RegistrarUsuario.getText().trim(),
                            RegistrarPass.getText().trim(),
                            RegistrarDocumento.getText().trim(),
                            TipoDocCB.getSelectedItem().toString(),
                            RegistrarNombres.getText().trim(),
                            RegistrarApellidos.getText().trim(),
                            fechaNacimiento,  // Fecha ya convertida
                            RegistrarTelefono.getText().trim(),
                            RegistrarCorreo.getText().trim(),
                            GeneroCB.getSelectedItem().toString(),
                            ResidenciaHolder.getText().trim(),
                            null, // Si hay algún otro campo que manejar
                            fichasList,
                            programasFormacion,
                            jornadasFormacion,
                            nivelesFormacion,
                            sedesList,
                            areasList
                    );

                    // 13. Enviar el modelo a la API
                    API_Admin_InstructorApplications crearInstructor = new API_Admin_InstructorApplications();
                    crearInstructor.CrearInstructor(instructor); // Asumiendo que retorna un boolean
                    JOptionPane.showMessageDialog(null, "Instructor registrado exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    limpiarFormularioInstructor();

                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error al procesar los datos del instructor: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

            case JOptionPane.NO_OPTION, JOptionPane.CANCEL_OPTION -> {
                // Opcional: Puedes agregar alguna acción si el usuario selecciona No o Cancelar
                System.out.println("Registro de Instructor cancelado por el usuario.");
            }
        }
    }//GEN-LAST:event_ConfirmarRegistroUsuarioActionPerformed


    private void limpiarFormularioInstructor() {
        RegistrarUsuario.setText("");
        RegistrarPass.setText("");
        RegistrarDocumento.setText("");
        RegistrarNombres.setText("");
        RegistrarApellidos.setText("");
        RegistrarTelefono.setText("");
        RegistrarCorreo.setText("");
        ResidenciaHolder.setText("");
        FechaHolder.setText("");
        RegistrarProgramaFormacion.setText("");
        RegistrarNivelFormacion.setText("");
        RegistrarJornadaFormacion.setText("");
        RegistrarArea.setText("");
        RegistrarSede.setText("");

        // Restablecer JComboBoxes
        TipoDocCB.setSelectedIndex(0);  // Asumiendo que el índice 0 es "Seleccionar..."
        YearCB.setSelectedIndex(0);
        MesCB.setSelectedIndex(0);
        MesCB.setEnabled(false);
        DiaCB.setSelectedIndex(0);
        DiaCB.setEnabled(false);
        GeneroCB.setSelectedIndex(0);  // Asumiendo que el índice 0 es "Seleccionar..."
        DepartamentoCB.setSelectedIndex(0);
        MunicipioCB.setSelectedIndex(0);
        MunicipioCB.setEnabled(false);
        BarrioCB.setSelectedIndex(0);
        BarrioCB.setEnabled(false);
        FichaCB.setSelectedIndex(0);

        modeloTabla.setRowCount(0);  // Vaciar todas las filas de la tabla

        // Otros campos de tipo JComboBox o componentes pueden ser reseteados aquí
    }

    private void DiaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaCBActionPerformed
        String diaSeleccionado = (String) DiaCB.getSelectedItem();

        if (diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar Día")) {
            actualizarFecha();  // Llamada al método para actualizar el TextField
        }
    }//GEN-LAST:event_DiaCBActionPerformed

    private void MesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MesCBActionPerformed
        String mesSeleccionado = (String) MesCB.getSelectedItem();

        // Verificamos si es "Seleccionar Mes"
        if (mesSeleccionado == null || mesSeleccionado.equals("Seleccionar Mes")) {
            diaModel.removeAllElements();   // Limpiar los días
            diaModel.addElement("Seleccionar Día");  // Volver a poner la opción por defecto
            DiaCB.setEnabled(false);  // Deshabilitar el ComboBox de Día
        } else {
            // Si se selecciona un mes válido, llenar los días
            int anho = Integer.parseInt((String) YearCB.getSelectedItem());
            int numeroMes = obtenerNumeroMes(mesSeleccionado);  // Obtener el número correcto del mes

            // Llenar los días en el ComboBox de Día
            llenarDias(diaModel, anho, numeroMes);
            DiaCB.setEnabled(true);  // Habilitar el ComboBox de Día
        }

        actualizarFecha();  // Actualizar el TextField FechaHolder
    }//GEN-LAST:event_MesCBActionPerformed

    private void RegistrarPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegistrarPassActionPerformed

    private void GeneroCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GeneroCBActionPerformed

    private void TipoDocCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoDocCBActionPerformed

    }//GEN-LAST:event_TipoDocCBActionPerformed

    private void MunicipioCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MunicipioCBActionPerformed
        String municipioSeleccionado = (String) MunicipioCB.getSelectedItem();

        if (municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...")) {
            BarrioCB.setEnabled(true);  // Habilitar el ComboBox de Barrio
        } else {
            BarrioCB.setEnabled(false);  // Deshabilitar el ComboBox de Barrio si no se selecciona un municipio válido
            BarrioCB.setSelectedItem("Seleccionar...");   // Situar el Barrio en "Seleccionar..."
        }

        actualizarResidencia();  // Actualizar el ResidenciaHolder
    }//GEN-LAST:event_MunicipioCBActionPerformed

    private void BarrioCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarrioCBActionPerformed
        actualizarResidencia();  // Llamar al método para actualizar el ResidenciaHolder
    }//GEN-LAST:event_BarrioCBActionPerformed

    private void DepartamentoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepartamentoCBActionPerformed
        String departamentoSeleccionado = (String) DepartamentoCB.getSelectedItem();

        if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...")) {
            MunicipioCB.setEnabled(true);  // Habilitar el ComboBox de Municipio
            BarrioCB.setEnabled(false);    // Deshabilitar el ComboBox de Barrio hasta que se seleccione un municipio
            BarrioCB.setSelectedItem("Seleccionar...");  // Situar el Barrio en "Seleccionar..."
        } else {
            // Si no se ha seleccionado un departamento válido, deshabilitar Municipio y Barrio
            MunicipioCB.setEnabled(false);
            BarrioCB.setEnabled(false);
            MunicipioCB.setSelectedItem("Seleccionar...");  // Situar el Municipio en "Seleccionar..."
            BarrioCB.setSelectedItem("Seleccionar...");     // Situar el Barrio en "Seleccionar..."
        }

        actualizarResidencia();  // Actualizar el ResidenciaHolder
    }//GEN-LAST:event_DepartamentoCBActionPerformed

    private void YearCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearCBActionPerformed
        String YearSeleccionado = (String) YearCB.getSelectedItem();

        // Verificamos si es "Seleccionar Año"
        if (YearSeleccionado == null || YearSeleccionado.equals("Seleccionar Año")) {
            mesModel.removeAllElements();   // Limpiar los meses
            mesModel.addElement("Seleccionar Mes");  // Volver a poner la opción por defecto
            MesCB.setEnabled(false);  // Deshabilitar el ComboBox de Mes

            diaModel.removeAllElements();   // Limpiar los días
            diaModel.addElement("Seleccionar Día");  // Volver a poner la opción por defecto
            DiaCB.setEnabled(false);  // Deshabilitar el ComboBox de Día
        } else {
            // Si se selecciona un año válido, llenar los meses
            llenarMeses();  // Llenar los meses
            MesCB.setEnabled(true);  // Habilitar el ComboBox de Mes
            DiaCB.setEnabled(false); // Deshabilitar el ComboBox de Día hasta que se seleccione un mes
            DiaCB.removeAllItems();  // Limpiar los días por si acaso
        }

        actualizarFecha();  // Actualizar el TextField FechaHolder
    }//GEN-LAST:event_YearCBActionPerformed

    private void FichaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FichaCBActionPerformed
        String fichaSeleccionada = (String) FichaCB.getSelectedItem();

        if (fichaSeleccionada != null && !fichaSeleccionada.equals("Seleccionar...")) {
            try {
                // Convertir el valor seleccionado a un número de ficha (si corresponde)
                int ficha = Integer.parseInt(fichaSeleccionada);
                System.out.println(ficha);

                // Crear una instancia de DataTables para realizar la consulta
                DataTables dataTables = new DataTables();

                // Consultar el programa de formación por la ficha seleccionada
                Map<String, Object> FichaDataResult = dataTables.obtenerProgramaFormacionPorFicha(ficha);
                System.out.println(FichaDataResult);

                if (FichaDataResult != null) {
                    // Colocar el valor obtenido en el JTextField correspondiente
                    RegistrarProgramaFormacion.setText((String) FichaDataResult.get("ProgramaFormacion"));
                    RegistrarNivelFormacion.setText((String) FichaDataResult.get("NivelFormacion"));
                    RegistrarJornadaFormacion.setText((String) FichaDataResult.get("JornadasFormacion"));
                    RegistrarSede.setText((String) FichaDataResult.get("Sede"));
                    RegistrarArea.setText((String) FichaDataResult.get("Area"));

                } else {
                    // Si no se obtiene un resultado válido, limpiar el campo de texto
                    RegistrarProgramaFormacion.setText((String) FichaDataResult.get("ProgramaFormacion No encontrado"));
                    RegistrarNivelFormacion.setText((String) FichaDataResult.get("NivelFormacion No encontrado"));
                    RegistrarJornadaFormacion.setText((String) FichaDataResult.get("JornadasFormacion No encontrado"));
                    RegistrarSede.setText((String) FichaDataResult.get("Sede No encontrado"));
                    RegistrarArea.setText((String) FichaDataResult.get("Area No encontrado"));
                }
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
                RegistrarProgramaFormacion.setText("ProgramaFormacion Invalida");
                RegistrarNivelFormacion.setText("NivelFormacion Invalida");
                RegistrarJornadaFormacion.setText("JornadasFormacion Invalida");
                RegistrarSede.setText("Sede Invalida");
                RegistrarArea.setText("Area Invalida");
            }
        } else {
            // Limpiar el campo si no hay selección válida
            RegistrarProgramaFormacion.setText("");
            RegistrarNivelFormacion.setText("");
            RegistrarJornadaFormacion.setText("");
            RegistrarSede.setText("");
            RegistrarArea.setText("");
        }
    }//GEN-LAST:event_FichaCBActionPerformed

    private void AsociarFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AsociarFichaActionPerformed
        String fichaSeleccionada = (String) FichaCB.getSelectedItem();

        // Verificar si se ha seleccionado una ficha válida
        if (fichaSeleccionada != null && !fichaSeleccionada.equals("Seleccionar...")) {
            try {
                // Convertir el valor seleccionado a un número de ficha (si corresponde)
                int ficha = Integer.parseInt(fichaSeleccionada);

                // Verificar si la ficha ya está asociada en la tabla
                if (fichaYaAsociada(ficha)) {
                    JOptionPane.showMessageDialog(null, "La ficha " + ficha + " ya está asociada.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Salir del método si la ficha ya está asociada
                }

                // Crear una instancia de DataTables para realizar la consulta
                DataTables dataTables = new DataTables();

                // Consultar el programa de formación por la ficha seleccionada
                Map<String, Object> FichaDataResult = dataTables.obtenerProgramaFormacionPorFicha(ficha);

                // Si se obtuvieron resultados válidos, agregar la ficha a la tabla
                if (FichaDataResult != null) {
                    // Obtener los valores del resultado de la consulta
                    String programaFormacion = (String) FichaDataResult.get("ProgramaFormacion");
                    String nivelFormacion = (String) FichaDataResult.get("NivelFormacion");
                    String jornadaFormacion = (String) FichaDataResult.get("JornadasFormacion");
                    String sede = (String) FichaDataResult.get("Sede");
                    String area = (String) FichaDataResult.get("Area");

                    // Obtener el modelo de la tabla
                    DefaultTableModel modeloTabla = (DefaultTableModel) FichasAsociadasTB.getModel();

                    // Agregar una nueva fila con los valores obtenidos
                    modeloTabla.addRow(new Object[] {ficha, programaFormacion, nivelFormacion, jornadaFormacion, sede, area, "Eliminar"});

                    // Configurar los renderers y editores para la columna "Eliminar"
                    FichasAsociadasTB.getColumn("Eliminar").setCellRenderer(new ButtonColumnHelper.ButtonRenderer());
                    FichasAsociadasTB.getColumn("Eliminar").setCellEditor(new ButtonColumnHelper.ButtonEditor(new JCheckBox(), FichasAsociadasTB));

                    // Imprimir el contenido de la tabla después de agregar la fila
                    imprimirContenidoTabla();

                } else {
                    // Si no se obtuvieron resultados válidos, mostrar un mensaje de error
                    JOptionPane.showMessageDialog(null, "Ficha no encontrada o datos incompletos", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (NumberFormatException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Ficha inválida", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si no se ha seleccionado una ficha válida, mostrar un mensaje de advertencia
            JOptionPane.showMessageDialog(null, "Debe seleccionar una ficha válida", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_AsociarFichaActionPerformed

    private void RegistrarAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegistrarAreaActionPerformed

    private void RegistrarNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RegistrarNombresKeyTyped
        char caracter = evt.getKeyChar();

        // Permitir solo letras, la barra espaciadora y las teclas de control (como backspace)
        if (!Character.isLetter(caracter) && caracter != '\b' && caracter != ' ') {
            evt.consume();  // Evitar que se ingrese el carácter no válido
            JOptionPane.showMessageDialog(this, "Solo se permiten letras y espacios.");
        }
    }//GEN-LAST:event_RegistrarNombresKeyTyped

    private void RegistrarApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RegistrarApellidosKeyTyped
        char caracter = evt.getKeyChar();

        // Permitir solo letras, la barra espaciadora y las teclas de control (como backspace)
        if (!Character.isLetter(caracter) && caracter != '\b' && caracter != ' ') {
            evt.consume();  // Evitar que se ingrese el carácter no válido
            JOptionPane.showMessageDialog(this, "Solo se permiten letras y espacios.");
        }
    }//GEN-LAST:event_RegistrarApellidosKeyTyped

    private void RegistrarDocumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RegistrarDocumentoKeyTyped
                char caracter = evt.getKeyChar();

        // Permitir solo números y la tecla de retroceso
        if (!Character.isDigit(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
            evt.consume();  // Evitar que se ingrese el carácter no válido
            JOptionPane.showMessageDialog(this, "Solo se permiten números.");
        }
    }//GEN-LAST:event_RegistrarDocumentoKeyTyped

    private void RegistrarTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RegistrarTelefonoKeyTyped
                char caracter = evt.getKeyChar();

        // Permitir solo números y la tecla de retroceso
        if (!Character.isDigit(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
            evt.consume();  // Evitar que se ingrese el carácter no válido
            JOptionPane.showMessageDialog(this, "Solo se permiten números.");
        }
    }//GEN-LAST:event_RegistrarTelefonoKeyTyped

    private boolean fichaYaAsociada(int ficha) {
        DefaultTableModel modeloTabla = (DefaultTableModel) FichasAsociadasTB.getModel();
        int filas = modeloTabla.getRowCount();

        for (int i = 0; i < filas; i++) {
            int fichaEnTabla = (int) modeloTabla.getValueAt(i, 0); // La ficha está en la columna 0
            if (fichaEnTabla == ficha) {
                return true; // Ficha ya existe en la tabla
            }
        }
        return false; // Ficha no existe en la tabla
    }

    private void imprimirContenidoTabla() {
        try {
            DefaultTableModel modeloTabla = (DefaultTableModel) FichasAsociadasTB.getModel();
            int filas = modeloTabla.getRowCount();  // Número de filas
            int columnas = modeloTabla.getColumnCount();  // Número de columnas

            System.out.println("Contenido actual de la tabla:");

            // Recorre cada fila
            for (int i = 0; i < filas; i++) {
                StringBuilder fila = new StringBuilder();  // Utilizamos StringBuilder para construir cada fila
                // Recorre cada columna en la fila
                for (int j = 0; j < columnas; j++) {
                    Object value = modeloTabla.getValueAt(i, j);  // Obtiene el valor de la celda
                    fila.append(value != null ? value.toString() : "null").append(" ");  // Si el valor es null, muestra "null"
                }
                System.out.println(fila.toString().trim());  // Imprime la fila completa
            }

            // Si la tabla está vacía
            if (filas == 0) {
                System.out.println("La tabla está vacía.");
            }
        } catch (Exception e) {
            e.printStackTrace();  // Imprimir cualquier error que ocurra durante la impresión de la tabla
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AsociarFicha;
    private javax.swing.JComboBox<String> BarrioCB;
    private javax.swing.JButton ConfirmarRegistroUsuario;
    private javax.swing.JPanel CreateInstructorSubPanel;
    private javax.swing.JComboBox<String> DepartamentoCB;
    private javax.swing.JComboBox<String> DiaCB;
    private javax.swing.JTextField FechaHolder;
    private javax.swing.JComboBox<String> FichaCB;
    private javax.swing.JTable FichasAsociadasTB;
    private javax.swing.JComboBox<String> GeneroCB;
    private javax.swing.JComboBox<String> MesCB;
    private javax.swing.JComboBox<String> MunicipioCB;
    private javax.swing.JTextField RegistrarApellidos;
    private javax.swing.JTextField RegistrarArea;
    private javax.swing.JTextField RegistrarCorreo;
    private javax.swing.JTextField RegistrarDocumento;
    private javax.swing.JTextField RegistrarJornadaFormacion;
    private javax.swing.JTextField RegistrarNivelFormacion;
    private javax.swing.JTextField RegistrarNombres;
    private javax.swing.JTextField RegistrarPass;
    private javax.swing.JTextField RegistrarProgramaFormacion;
    private javax.swing.JTextField RegistrarSede;
    private javax.swing.JTextField RegistrarTelefono;
    private javax.swing.JTextField RegistrarUsuario;
    private javax.swing.JTextField ResidenciaHolder;
    private javax.swing.JComboBox<String> TipoDocCB;
    private javax.swing.JComboBox<String> YearCB;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
