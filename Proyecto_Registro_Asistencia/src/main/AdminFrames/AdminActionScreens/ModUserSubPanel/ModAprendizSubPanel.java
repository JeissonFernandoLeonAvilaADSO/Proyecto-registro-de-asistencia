/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main.AdminFrames.AdminActionScreens.ModUserSubPanel;

import java.awt.event.KeyEvent;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Calendar;
import java.time.LocalDate;

import main.util.API_Actions.API_BuscarUsuario;
import main.util.API_AdminActions.API_Admin_UsersApplications.API_Admin_AprendizApplications;
import main.util.models.ComboBoxModels;

import javax.swing.*;

import main.util.models.DataTables;
import main.util.models.UsersModels.AprendizModel;

/**
 *
 * @author usuario
 */
public class ModAprendizSubPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateAprendizSubPanel
     */

    DefaultComboBoxModel<String> yearModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> mesModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> diaModel = new DefaultComboBoxModel<>();
    public ModAprendizSubPanel() {
        initComponents();
        aditionalConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateAprendizSubPanel = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        ResultadoUsuario = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        ResultadoNombres = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        ResultadoArea = new javax.swing.JTextField();
        ResultadoCorreo = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        ResultadoApellidos = new javax.swing.JTextField();
        ResultadoDocumento = new javax.swing.JTextField();
        FichaCB = new javax.swing.JComboBox<>();
        ResultadoTelefono = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TipoDocCB = new javax.swing.JComboBox<>();
        GeneroCB = new javax.swing.JComboBox<>();
        ResultadoNivelFormacion = new javax.swing.JTextField();
        ResultadoSede = new javax.swing.JTextField();
        ResultadoJornadaFormacion = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        DepartamentoCB = new javax.swing.JComboBox<>();
        BarrioCB = new javax.swing.JComboBox<>();
        MunicipioCB = new javax.swing.JComboBox<>();
        ConfirmarRegistroUsuario = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        ResultadoProgramaFormacion = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        YearCB = new javax.swing.JComboBox<>();
        MesCB = new javax.swing.JComboBox<>();
        DiaCB = new javax.swing.JComboBox<>();
        ResultadoFechaHolder = new javax.swing.JTextField();
        ResultadoHolder = new javax.swing.JTextField();
        IDInstructorField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        BuscarDatosUsuario = new javax.swing.JButton();
        RefrescarCombos = new javax.swing.JButton();
        ResultadoPass = new javax.swing.JPasswordField();

        CreateAprendizSubPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel27.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 0));
        jLabel27.setText("Usuario");

        ResultadoUsuario.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoUsuario.setForeground(new java.awt.Color(0, 0, 0));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Contrase√±a");

        ResultadoNombres.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoNombres.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ResultadoNombresKeyTyped(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 0));
        jLabel29.setText("Correo");

        ResultadoArea.setEditable(false);
        ResultadoArea.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoArea.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoArea.setFocusable(false);

        ResultadoCorreo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoCorreo.setForeground(new java.awt.Color(0, 0, 0));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("Documento");

        jLabel38.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 0, 0));
        jLabel38.setText("Numero de ficha");

        ResultadoApellidos.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoApellidos.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ResultadoApellidosKeyTyped(evt);
            }
        });

        ResultadoDocumento.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoDocumento.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ResultadoDocumentoKeyTyped(evt);
            }
        });

        FichaCB.setForeground(new java.awt.Color(0, 0, 0));
        FichaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        FichaCB.setPreferredSize(new java.awt.Dimension(64, 28));
        FichaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FichaCBActionPerformed(evt);
            }
        });

        ResultadoTelefono.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoTelefono.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ResultadoTelefonoKeyTyped(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(0, 0, 0));
        jLabel39.setText("Jornada de formacion");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("Telefono");

        jLabel24.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("Area de trabajo");

        jLabel40.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 0, 0));
        jLabel40.setText("Nivel de formacion");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("Nombres");

        jLabel22.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("Apellidos");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("Tipo de documento");

        jLabel23.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("Genero");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Sede");

        TipoDocCB.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        TipoDocCB.setForeground(new java.awt.Color(0, 0, 0));
        TipoDocCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TipoDocCB.setPreferredSize(new java.awt.Dimension(64, 28));
        TipoDocCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoDocCBActionPerformed(evt);
            }
        });

        GeneroCB.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        GeneroCB.setForeground(new java.awt.Color(0, 0, 0));
        GeneroCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        GeneroCB.setPreferredSize(new java.awt.Dimension(64, 28));
        GeneroCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroCBActionPerformed(evt);
            }
        });

        ResultadoNivelFormacion.setEditable(false);
        ResultadoNivelFormacion.setFocusable(false);

        ResultadoSede.setEditable(false);
        ResultadoSede.setFocusable(false);

        ResultadoJornadaFormacion.setEditable(false);
        ResultadoJornadaFormacion.setFocusable(false);

        jLabel30.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("Residencia");

        DepartamentoCB.setForeground(new java.awt.Color(0, 0, 0));
        DepartamentoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DepartamentoCB.setPreferredSize(new java.awt.Dimension(64, 28));
        DepartamentoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepartamentoCBActionPerformed(evt);
            }
        });

        BarrioCB.setForeground(new java.awt.Color(0, 0, 0));
        BarrioCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BarrioCB.setEnabled(false);
        BarrioCB.setPreferredSize(new java.awt.Dimension(64, 28));
        BarrioCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarrioCBActionPerformed(evt);
            }
        });

        MunicipioCB.setForeground(new java.awt.Color(0, 0, 0));
        MunicipioCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        MunicipioCB.setEnabled(false);
        MunicipioCB.setPreferredSize(new java.awt.Dimension(64, 28));
        MunicipioCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MunicipioCBActionPerformed(evt);
            }
        });

        ConfirmarRegistroUsuario.setBackground(new java.awt.Color(0, 34, 64));
        ConfirmarRegistroUsuario.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ConfirmarRegistroUsuario.setForeground(new java.awt.Color(255, 255, 255));
        ConfirmarRegistroUsuario.setText("Modificar Aprendiz");
        ConfirmarRegistroUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmarRegistroUsuarioActionPerformed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 0, 0));
        jLabel41.setText("Programa de Formacion");

        ResultadoProgramaFormacion.setEditable(false);
        ResultadoProgramaFormacion.setFocusable(false);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));
        jLabel25.setText("Fecha de Nacimiento");

        YearCB.setForeground(new java.awt.Color(0, 0, 0));
        YearCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        YearCB.setPreferredSize(new java.awt.Dimension(64, 28));
        YearCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearCBActionPerformed(evt);
            }
        });

        MesCB.setForeground(new java.awt.Color(0, 0, 0));
        MesCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        MesCB.setEnabled(false);
        MesCB.setPreferredSize(new java.awt.Dimension(64, 28));
        MesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MesCBActionPerformed(evt);
            }
        });

        DiaCB.setForeground(new java.awt.Color(0, 0, 0));
        DiaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DiaCB.setEnabled(false);
        DiaCB.setPreferredSize(new java.awt.Dimension(64, 28));
        DiaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiaCBActionPerformed(evt);
            }
        });

        ResultadoFechaHolder.setEditable(false);
        ResultadoFechaHolder.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoFechaHolder.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoFechaHolder.setFocusable(false);

        ResultadoHolder.setEditable(false);
        ResultadoHolder.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ResultadoHolder.setForeground(new java.awt.Color(0, 0, 0));
        ResultadoHolder.setFocusable(false);

        IDInstructorField.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        IDInstructorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDInstructorFieldActionPerformed(evt);
            }
        });
        IDInstructorField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IDInstructorFieldKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Documento del usuario");

        BuscarDatosUsuario.setBackground(new java.awt.Color(57, 169, 0));
        BuscarDatosUsuario.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        BuscarDatosUsuario.setForeground(new java.awt.Color(255, 255, 255));
        BuscarDatosUsuario.setText("Buscar");
        BuscarDatosUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarDatosUsuarioActionPerformed(evt);
            }
        });

        RefrescarCombos.setBackground(new java.awt.Color(57, 169, 0));
        RefrescarCombos.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        RefrescarCombos.setForeground(new java.awt.Color(255, 255, 255));
        RefrescarCombos.setText("Refrescar comboBox");
        RefrescarCombos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefrescarCombosActionPerformed(evt);
            }
        });

        ResultadoPass.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N

        javax.swing.GroupLayout CreateAprendizSubPanelLayout = new javax.swing.GroupLayout(CreateAprendizSubPanel);
        CreateAprendizSubPanel.setLayout(CreateAprendizSubPanelLayout);
        CreateAprendizSubPanelLayout.setHorizontalGroup(
            CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ConfirmarRegistroUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel39)
                            .addComponent(jLabel41)
                            .addComponent(jLabel24)
                            .addComponent(jLabel17))
                        .addGap(33, 33, 33)
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ResultadoNivelFormacion, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ResultadoJornadaFormacion)
                            .addComponent(ResultadoArea)
                            .addComponent(ResultadoSede)
                            .addComponent(ResultadoProgramaFormacion)))
                    .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel38)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29)
                            .addComponent(jLabel18)
                            .addComponent(jLabel23)
                            .addComponent(jLabel25))
                        .addGap(56, 56, 56)
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                                .addComponent(YearCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DiaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResultadoFechaHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE))
                            .addComponent(GeneroCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ResultadoTelefono)
                            .addComponent(ResultadoCorreo)
                            .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                                .addComponent(DepartamentoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MunicipioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(BarrioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResultadoHolder))
                            .addComponent(FichaCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(jLabel6))
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateAprendizSubPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RefrescarCombos, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ResultadoPass, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ResultadoApellidos, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(TipoDocCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ResultadoNombres)
                                    .addComponent(ResultadoUsuario)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addComponent(IDInstructorField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscarDatosUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(120, 120, 120)
                        .addComponent(ResultadoDocumento)))
                .addContainerGap())
        );
        CreateAprendizSubPanelLayout.setVerticalGroup(
            CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateAprendizSubPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RefrescarCombos, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDInstructorField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BuscarDatosUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel28)
                        .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                            .addGap(34, 34, 34)
                            .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ResultadoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19))))
                    .addGroup(CreateAprendizSubPanelLayout.createSequentialGroup()
                        .addComponent(ResultadoPass, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipoDocCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel25)
                        .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(YearCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DiaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ResultadoFechaHolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GeneroCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(ResultadoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DepartamentoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MunicipioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BarrioCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ResultadoHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(FichaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoProgramaFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoNivelFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addGap(6, 6, 6)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResultadoJornadaFormacion, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(ResultadoArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateAprendizSubPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(ResultadoSede, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ConfirmarRegistroUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CreateAprendizSubPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CreateAprendizSubPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TipoDocCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipoDocCBActionPerformed

    }//GEN-LAST:event_TipoDocCBActionPerformed

    private void GeneroCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GeneroCBActionPerformed

    private void FichaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FichaCBActionPerformed
           String fichaSeleccionada = (String) FichaCB.getSelectedItem();

            if (fichaSeleccionada != null && !fichaSeleccionada.equals("Seleccionar...")) {
                try {
                    // Convertir el valor seleccionado a un n√∫mero de ficha (si corresponde)
                    int ficha = Integer.parseInt(fichaSeleccionada);
                    System.out.println(ficha);

                    // Crear una instancia de DataTables para realizar la consulta
                    DataTables dataTables = new DataTables();

                    // Consultar el programa de formaci√≥n por la ficha seleccionada
                    Map<String, Object> FichaDataResult = dataTables.obtenerProgramaFormacionPorFicha(ficha);
                    System.out.println(FichaDataResult);

                    if (FichaDataResult != null) {
                        // Colocar el valor obtenido en el JTextField correspondiente
                        ResultadoProgramaFormacion.setText((String) FichaDataResult.get("ProgramaFormacion"));
                        ResultadoNivelFormacion.setText((String) FichaDataResult.get("NivelFormacion"));
                        ResultadoJornadaFormacion.setText((String) FichaDataResult.get("JornadasFormacion"));
                        ResultadoSede.setText((String) FichaDataResult.get("Sede"));
                        ResultadoArea.setText((String) FichaDataResult.get("Area"));

                    } else {
                        // Si no se obtiene un resultado v√°lido, limpiar el campo de texto
                        ResultadoProgramaFormacion.setText((String) FichaDataResult.get("ProgramaFormacion No encontrado"));
                        ResultadoNivelFormacion.setText((String) FichaDataResult.get("NivelFormacion No encontrado"));
                        ResultadoJornadaFormacion.setText((String) FichaDataResult.get("JornadasFormacion No encontrado"));
                        ResultadoSede.setText((String) FichaDataResult.get("Sede No encontrado"));
                        ResultadoArea.setText((String) FichaDataResult.get("Area No encontrado"));
                    }
                } catch (NumberFormatException ex) {
                    ex.printStackTrace();
                        ResultadoProgramaFormacion.setText("ProgramaFormacion Invalida");
                        ResultadoNivelFormacion.setText("NivelFormacion Invalida");
                        ResultadoJornadaFormacion.setText("JornadasFormacion Invalida");
                        ResultadoSede.setText("Sede Invalida");
                        ResultadoArea.setText("Area Invalida");
                }
            } else {
                // Limpiar el campo si no hay selecci√≥n v√°lida
                        ResultadoProgramaFormacion.setText("");
                        ResultadoNivelFormacion.setText("");
                        ResultadoJornadaFormacion.setText("");
                        ResultadoSede.setText("");
                        ResultadoArea.setText("");
            }
    }//GEN-LAST:event_FichaCBActionPerformed

    public void aditionalConfig(){
        yearModel.addElement("Seleccionar A√±o");
        llenarYear(yearModel);
        mesModel.addElement("Seleccionar Mes");
        diaModel.addElement("Seleccionar D√≠a");
        try {
            ComboBoxModels CBModels = new ComboBoxModels();
            TipoDocCB.setModel(CBModels.generarComboBoxModelPorTipo("TipoDocumento"));
            GeneroCB.setModel(CBModels.generarComboBoxModelPorTipo("Genero"));
            MunicipioCB.setModel(CBModels.generarComboBoxModelPorTipo("Municipios"));
            DepartamentoCB.setModel(CBModels.generarComboBoxModelPorTipo("Departamentos"));
            BarrioCB.setModel(CBModels.generarComboBoxModelPorTipo("Barrios"));
            FichaCB.setModel(CBModels.generarComboBoxModelPorTipo("Fichas"));
            YearCB.setModel(yearModel);
            MesCB.setModel(mesModel);
            DiaCB.setModel(diaModel);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    private void llenarYear(DefaultComboBoxModel<String> anhoModel) {
        int anhoActual = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = anhoActual; i > anhoActual - 100; i--) {
            anhoModel.addElement(String.valueOf(i));
        }
    }

    public void llenarMeses() {
        mesModel.removeAllElements();
        mesModel.addElement("Seleccionar Mes");
        String[] meses = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
                "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
        for (String mes : meses) {
            mesModel.addElement(mes);
        }
    }

    private void llenarDias(DefaultComboBoxModel<String> diaModel, int anho, int mes) {
        diaModel.removeAllElements();
        diaModel.addElement("Seleccionar D√≠a");
        int diasEnMes = obtenerDiasDelMes(anho, mes);
        for (int i = 1; i <= diasEnMes; i++) {
            diaModel.addElement(String.valueOf(i));
        }
    }

    private int obtenerDiasDelMes(int anho, int mes) {
        switch (mes) {
            case 1: case 3: case 5: case 7: case 8: case 10: case 12:
                return 31;
            case 4: case 6: case 9: case 11:
                return 30;
            case 2:
                return (anho % 4 == 0 && (anho % 100 != 0 || anho % 400 == 0)) ? 29 : 28;
            default:
                return 30;
        }
    }

    private int obtenerNumeroMes(String mesSeleccionado) {
        switch (mesSeleccionado) {
            case "Enero": return 1;
            case "Febrero": return 2;
            case "Marzo": return 3;
            case "Abril": return 4;
            case "Mayo": return 5;
            case "Junio": return 6;
            case "Julio": return 7;
            case "Agosto": return 8;
            case "Septiembre": return 9;
            case "Octubre": return 10;
            case "Noviembre": return 11;
            case "Diciembre": return 12;
            default: return -1; // En caso de error
        }
    }

    private void actualizarFecha() {
        String anhoSeleccionado = (String) YearCB.getSelectedItem();
        String mesSeleccionado = (String) MesCB.getSelectedItem();
        String diaSeleccionado = (String) DiaCB.getSelectedItem();

        // Comprobar si los tres elementos han sido seleccionados correctamente
        if (anhoSeleccionado != null && !anhoSeleccionado.equals("Seleccionar A√±o") &&
                mesSeleccionado != null && !mesSeleccionado.equals("Seleccionar Mes") &&
                diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar D√≠a")) {

            // Convertir el nombre del mes a su n√∫mero usando obtenerNumeroMes()
            int numeroMes = obtenerNumeroMes(mesSeleccionado);
            String mesConFormato = (numeroMes < 10 ? "0" : "") + numeroMes; // Formatear el mes con cero si es necesario
            String diaConFormato = (Integer.parseInt(diaSeleccionado) < 10 ? "0" : "") + diaSeleccionado; // Formatear el d√≠a con cero si es necesario

            // Mostrar la fecha en formato "yyyy-MM-dd"
            ResultadoFechaHolder.setText(anhoSeleccionado + "-" + mesConFormato + "-" + diaConFormato);
        } else {
            // Si alguno no est√° seleccionado, mostrar el campo vac√≠o o parcialmente seleccionado
            String fechaParcial = "";
            if (anhoSeleccionado != null && !anhoSeleccionado.equals("Seleccionar A√±o")) {
                fechaParcial += anhoSeleccionado;
            }
            if (mesSeleccionado != null && !mesSeleccionado.equals("Seleccionar Mes")) {
                int numeroMes = obtenerNumeroMes(mesSeleccionado);
                String mesConFormato = (numeroMes < 10 ? "0" : "") + numeroMes; // Formatear el mes con cero si es necesario
                if (!fechaParcial.isEmpty()) {
                    fechaParcial += "-";  // Solo a√±adir el guion si ya hay algo en la fecha parcial
                }
                fechaParcial += mesConFormato;
            }
            if (diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar D√≠a")) {
                String diaConFormato = (Integer.parseInt(diaSeleccionado) < 10 ? "0" : "") + diaSeleccionado; // Formatear el d√≠a con cero si es necesario
                if (!fechaParcial.isEmpty()) {
                    fechaParcial += "-";  // Solo a√±adir el guion si ya hay algo en la fecha parcial
                }
                fechaParcial += diaConFormato;
            }
            ResultadoFechaHolder.setText(fechaParcial); // Mostrar la selecci√≥n parcial
        }
    }
    
    private void actualizarResidencia() {
        String departamentoSeleccionado = (String) DepartamentoCB.getSelectedItem();
        String municipioSeleccionado = (String) MunicipioCB.getSelectedItem();
        String barrioSeleccionado = (String) BarrioCB.getSelectedItem();

        // Comprobar si los tres elementos han sido seleccionados correctamente
        if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...") &&
            municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...") &&
            barrioSeleccionado != null && !barrioSeleccionado.equals("Seleccionar...")) {

            // Mostrar la residencia en formato "Departamento - Municipio - Barrio"
            ResultadoHolder.setText(departamentoSeleccionado + " - " + municipioSeleccionado + " - " + barrioSeleccionado);
        } else {
            // Si alguno no est√° seleccionado, mostrar el campo parcial
            String residenciaParcial = "";
            if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...")) {
                residenciaParcial += departamentoSeleccionado;
            }
            if (municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...")) {
                if (!residenciaParcial.isEmpty()) {
                    residenciaParcial += " - ";  // Solo a√±adir el separador si hay un valor previo
                }
                residenciaParcial += municipioSeleccionado;
            }
            if (barrioSeleccionado != null && !barrioSeleccionado.equals("Seleccionar...")) {
                if (!residenciaParcial.isEmpty()) {
                    residenciaParcial += " - ";  // Solo a√±adir el separador si hay un valor previo
                }
                residenciaParcial += barrioSeleccionado;
            }
            ResultadoHolder.setText(residenciaParcial);  // Mostrar la selecci√≥n parcial
        }
    }

    
    private void DepartamentoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepartamentoCBActionPerformed
        String departamentoSeleccionado = (String) DepartamentoCB.getSelectedItem();

        if (departamentoSeleccionado != null && !departamentoSeleccionado.equals("Seleccionar...")) {
            MunicipioCB.setEnabled(true);  // Habilitar el ComboBox de Municipio
            BarrioCB.setEnabled(false);    // Deshabilitar el ComboBox de Barrio hasta que se seleccione un municipio
            BarrioCB.setSelectedItem("Seleccionar...");  // Situar el Barrio en "Seleccionar..."
        } else {
            // Si no se ha seleccionado un departamento v√°lido, deshabilitar Municipio y Barrio
            MunicipioCB.setEnabled(false);
            BarrioCB.setEnabled(false);
            MunicipioCB.setSelectedItem("Seleccionar...");  // Situar el Municipio en "Seleccionar..."
            BarrioCB.setSelectedItem("Seleccionar...");     // Situar el Barrio en "Seleccionar..."
        }

        actualizarResidencia();  // Actualizar el ResidenciaHolder
    }//GEN-LAST:event_DepartamentoCBActionPerformed

    private void BarrioCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarrioCBActionPerformed
        actualizarResidencia();  // Llamar al m√©todo para actualizar el ResidenciaHolder
    }//GEN-LAST:event_BarrioCBActionPerformed

    private void MunicipioCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MunicipioCBActionPerformed
        String municipioSeleccionado = (String) MunicipioCB.getSelectedItem();

        if (municipioSeleccionado != null && !municipioSeleccionado.equals("Seleccionar...")) {
            BarrioCB.setEnabled(true);  // Habilitar el ComboBox de Barrio
        } else {
            BarrioCB.setEnabled(false);  // Deshabilitar el ComboBox de Barrio si no se selecciona un municipio v√°lido
            BarrioCB.setSelectedItem("Seleccionar...");   // Situar el Barrio en "Seleccionar..."
        }

        actualizarResidencia();  // Actualizar el ResidenciaHolder
    }//GEN-LAST:event_MunicipioCBActionPerformed

    private void ConfirmarRegistroUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmarRegistroUsuarioActionPerformed
        // Formato de la fecha esperada
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
        formatoFecha.setLenient(false); // Validaci√≥n estricta de la fecha
        java.util.Date fechaNacimientoUtil = null;
        java.sql.Date fechaNacimiento = null;

        // Variable para acumular errores de validaci√≥n
        StringBuilder errores = new StringBuilder();

        // 1. Validaci√≥n de Campos Obligatorios
        if (ResultadoUsuario.getText().trim().isEmpty()) {
            errores.append("- El campo de Usuario es obligatorio.\n");
        }

        if (ResultadoPass.getText().trim().isEmpty()) {
            errores.append("- El campo de Contrase√±a es obligatorio.\n");
        }

        if (ResultadoDocumento.getText().trim().isEmpty()) {
            errores.append("- El campo de Documento es obligatorio.\n");
        }

        if (ResultadoNombres.getText().trim().isEmpty()) {
            errores.append("- El campo de Nombres es obligatorio.\n");
        }

        if (ResultadoApellidos.getText().trim().isEmpty()) {
            errores.append("- El campo de Apellidos es obligatorio.\n");
        }

        if (ResultadoFechaHolder.getText().trim().isEmpty()) {
            errores.append("- El campo de Fecha de Nacimiento es obligatorio.\n");
        }

        if (ResultadoTelefono.getText().trim().isEmpty()) {
            errores.append("- El campo de Tel√©fono es obligatorio.\n");
        }

        if (ResultadoCorreo.getText().trim().isEmpty()) {
            errores.append("- El campo de Correo Electr√≥nico es obligatorio.\n");
        }

        if (ResultadoHolder.getText().trim().isEmpty()) {
            errores.append("- El campo de Residencia es obligatorio.\n");
        }

        if (FichaCB.getSelectedItem() == null) {
            errores.append("- Debes seleccionar una Ficha.\n");
        }

        if (ResultadoProgramaFormacion.getText().trim().isEmpty()) {
            errores.append("- El campo de Programa de Formaci√≥n es obligatorio.\n");
        }

        if (ResultadoNivelFormacion.getText().trim().isEmpty()) {
            errores.append("- El campo de Nivel de Formaci√≥n es obligatorio.\n");
        }

        if (ResultadoJornadaFormacion.getText().trim().isEmpty()) {
            errores.append("- El campo de Jornada de Formaci√≥n es obligatorio.\n");
        }

        if (ResultadoArea.getText().trim().isEmpty()) {
            errores.append("- El campo de √Årea es obligatorio.\n");
        }

        if (ResultadoSede.getText().trim().isEmpty()) {
            errores.append("- El campo de Sede es obligatorio.\n");
        }

        // 2. Validaci√≥n de Fecha de Nacimiento
        if (!ResultadoFechaHolder.getText().trim().isEmpty()) {
            try {
                String fechaTexto = ResultadoFechaHolder.getText().trim();
                fechaNacimientoUtil = formatoFecha.parse(fechaTexto);
                fechaNacimiento = new java.sql.Date(fechaNacimientoUtil.getTime());

                // Verificar que la fecha no sea futura ni demasiado antigua
                if (fechaNacimiento.before(java.sql.Date.valueOf("1900-01-01")) || fechaNacimiento.after(new java.sql.Date(System.currentTimeMillis()))) {
                    errores.append("- La Fecha de Nacimiento es inv√°lida.\n");
                }

                // Verificar que el usuario tenga al menos 18 a√±os
                java.util.Calendar cal = java.util.Calendar.getInstance();
                cal.setTime(fechaNacimientoUtil);
                cal.add(java.util.Calendar.YEAR, 18);
                java.util.Date fechaMinima = cal.getTime();
                if (fechaMinima.after(new java.util.Date())) {
                    errores.append("- Debes tener al menos 18 a√±os para registrarte.\n");
                }

            } catch (ParseException e) {
                errores.append("- La Fecha de Nacimiento debe tener el formato 'yyyy-MM-dd'.\n");
            }
        }

        // 3. Validaci√≥n de Correo Electr√≥nico con Expresi√≥n Regular
        if (!ResultadoCorreo.getText().trim().isEmpty()) {
            String correo = ResultadoCorreo.getText().trim();
            String regexCorreo = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
            if (!correo.matches(regexCorreo)) {
                errores.append("- El Correo Electr√≥nico no es v√°lido.\n");
            }
        }

        // 4. Validaci√≥n de Tel√©fono (solo n√∫meros y longitud m√≠nima)
        if (!ResultadoTelefono.getText().trim().isEmpty()) {
            String telefono = ResultadoTelefono.getText().trim();
            String regexTelefono = "^[0-9]{7,15}$"; // Ajusta la longitud seg√∫n sea necesario
            if (!telefono.matches(regexTelefono)) {
                errores.append("- El Tel√©fono debe contener solo n√∫meros y tener entre 7 y 15 d√≠gitos.\n");
            }
        }

        // 5. Validaci√≥n de Documento (solo n√∫meros y m√≠nimo 4 caracteres)
        if (!ResultadoDocumento.getText().trim().isEmpty()) {
            String documento = ResultadoDocumento.getText().trim();
            if (!documento.matches("^[0-9]{4,}$")) { // Solo n√∫meros y al menos 4 d√≠gitos
                errores.append("- El Documento debe contener solo n√∫meros y tener al menos 4 d√≠gitos.\n");
            }
        }

        // 6. Validaci√≥n de Contrase√±a (m√≠nimo 8 caracteres)
        if (!ResultadoPass.getText().trim().isEmpty()) {
            String contrase√±a = ResultadoPass.getText().trim();
            if (contrase√±a.length() < 8) {
                errores.append("- La Contrase√±a debe tener al menos 8 caracteres.\n");
            }
            // Puedes agregar m√°s validaciones si es necesario, como combinaciones de letras y n√∫meros
        }

        // 7. Validaci√≥n de Ficha (convertir a entero)
        Integer ficha = null;
        if (FichaCB.getSelectedItem() != null) {
            try {
                ficha = Integer.parseInt(FichaCB.getSelectedItem().toString());
            } catch (NumberFormatException e) {
                errores.append("- La Ficha seleccionada no es v√°lida.\n");
            }
        }

        // Mostrar errores si existen
        if (errores.length() > 0) {
            JOptionPane.showMessageDialog(this, errores.toString(), "Errores de Validaci√≥n", JOptionPane.ERROR_MESSAGE);
            return; // Detener la ejecuci√≥n para no enviar el formulario
        }

        // Crear el objeto AprendizModel con la fecha convertida a Date
        AprendizModel aprendiz = new AprendizModel(
                ResultadoUsuario.getText().trim(),
                ResultadoPass.getText().trim(),
                ResultadoDocumento.getText().trim(),
                TipoDocCB.getSelectedItem().toString(),
                ResultadoNombres.getText().trim(),
                ResultadoApellidos.getText().trim(),
                fechaNacimiento,  // Pasa el objeto Date aqu√≠
                ResultadoTelefono.getText().trim(),
                ResultadoCorreo.getText().trim(),
                GeneroCB.getSelectedItem().toString(),
                ResultadoHolder.getText().trim(),
                ficha,
                ResultadoProgramaFormacion.getText().trim(),
                ResultadoNivelFormacion.getText().trim(),
                ResultadoJornadaFormacion.getText().trim(),
                ResultadoArea.getText().trim(),
                ResultadoSede.getText().trim()
        );

        API_Admin_AprendizApplications updateAprendiz = new API_Admin_AprendizApplications();
        updateAprendiz.UpdateAprendiz(ResultadoDocumento.getText(), aprendiz);


        limpiarFormularioAprendiz();
    }//GEN-LAST:event_ConfirmarRegistroUsuarioActionPerformed

    private void limpiarFormularioAprendiz() {
        // Limpiar JTextFields
        ResultadoUsuario.setText("");
        ResultadoPass.setText("");
        ResultadoDocumento.setText("");
        ResultadoNombres.setText("");
        ResultadoApellidos.setText("");
        ResultadoTelefono.setText("");
        ResultadoCorreo.setText("");
        ResultadoHolder.setText("");
        ResultadoFechaHolder.setText("");
        ResultadoProgramaFormacion.setText("");
        ResultadoNivelFormacion.setText("");
        ResultadoJornadaFormacion.setText("");
        ResultadoArea.setText("");
        ResultadoSede.setText("");

        // Restablecer JComboBoxes
        TipoDocCB.setSelectedIndex(0);  // Asumiendo que el √≠ndice 0 es "Seleccionar..."
        YearCB.setSelectedIndex(0);
        MesCB.setSelectedIndex(0);
        MesCB.setEnabled(false);
        DiaCB.setSelectedIndex(0);
        DiaCB.setEnabled(false);
        GeneroCB.setSelectedIndex(0);  // Asumiendo que el √≠ndice 0 es "Seleccionar..."
        DepartamentoCB.setSelectedIndex(0);
        MunicipioCB.setSelectedIndex(0);
        MunicipioCB.setEnabled(false);
        BarrioCB.setSelectedIndex(0);
        BarrioCB.setEnabled(false);
        FichaCB.setSelectedIndex(0);
        // Si tienes alguna tabla o componente adicional en Aprendiz, tambi√©n debes limpiarlo
    }

    private void YearCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearCBActionPerformed
        String YearSeleccionado = (String) YearCB.getSelectedItem();

        // Verificamos si es "Seleccionar A√±o"
        if (YearSeleccionado == null || YearSeleccionado.equals("Seleccionar A√±o")) {
            mesModel.removeAllElements();   // Limpiar los meses
            mesModel.addElement("Seleccionar Mes");  // Volver a poner la opci√≥n por defecto
            MesCB.setEnabled(false);  // Deshabilitar el ComboBox de Mes

            diaModel.removeAllElements();   // Limpiar los d√≠as
            diaModel.addElement("Seleccionar D√≠a");  // Volver a poner la opci√≥n por defecto
            DiaCB.setEnabled(false);  // Deshabilitar el ComboBox de D√≠a
        } else {
            // Si se selecciona un a√±o v√°lido, llenar los meses
            llenarMeses();  // Llenar los meses
            MesCB.setEnabled(true);  // Habilitar el ComboBox de Mes
            DiaCB.setEnabled(false); // Deshabilitar el ComboBox de D√≠a hasta que se seleccione un mes
            DiaCB.removeAllItems();  // Limpiar los d√≠as por si acaso
        }

        actualizarFecha();  // Actualizar el TextField FechaHolder
    }//GEN-LAST:event_YearCBActionPerformed

    private void MesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MesCBActionPerformed
        String mesSeleccionado = (String) MesCB.getSelectedItem();

        // Verificamos si es "Seleccionar Mes"
        if (mesSeleccionado == null || mesSeleccionado.equals("Seleccionar Mes")) {
            diaModel.removeAllElements();   // Limpiar los d√≠as
            diaModel.addElement("Seleccionar D√≠a");  // Volver a poner la opci√≥n por defecto
            DiaCB.setEnabled(false);  // Deshabilitar el ComboBox de D√≠a
        } else {
            // Si se selecciona un mes v√°lido, llenar los d√≠as
            int anho = Integer.parseInt((String) YearCB.getSelectedItem());
            int numeroMes = obtenerNumeroMes(mesSeleccionado);  // Obtener el n√∫mero correcto del mes

            // Llenar los d√≠as en el ComboBox de D√≠a
            llenarDias(diaModel, anho, numeroMes);
            DiaCB.setEnabled(true);  // Habilitar el ComboBox de D√≠a
        }

        actualizarFecha();  // Actualizar el TextField FechaHolder
    }//GEN-LAST:event_MesCBActionPerformed

    private void DiaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiaCBActionPerformed
        String diaSeleccionado = (String) DiaCB.getSelectedItem();

        if (diaSeleccionado != null && !diaSeleccionado.equals("Seleccionar D√≠a")) {
            actualizarFecha();  // Llamada al m√©todo para actualizar el TextField
        }
    }//GEN-LAST:event_DiaCBActionPerformed

    private void IDInstructorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDInstructorFieldActionPerformed
        BuscarDatosUsuario.doClick();
    }//GEN-LAST:event_IDInstructorFieldActionPerformed

    private void BuscarDatosUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarDatosUsuarioActionPerformed
        try {
            System.out.println("Evento BuscarDatosUsuarioActionPerformed disparado.");

            // Crea una nueva instancia de API_BuscarUsuario.
            API_BuscarUsuario buscarAprendiz = new API_BuscarUsuario();

            // Intenta buscar el usuario (Instructor o Aprendiz) en la base de datos.
            String documento = IDInstructorField.getText();

            AprendizModel aprendiz = buscarAprendiz.buscarAprendizPorDocumento(documento);

            if (aprendiz != null) {
                System.out.println("Aprendiz obtenido: " + aprendiz.getDocumento());
                System.out.println("Documento ingresado: " + documento);
                // Rellenar los campos con los datos del aprendiz
                ResultadoUsuario.setText(aprendiz.getUser());
                ResultadoDocumento.setText(aprendiz.getDocumento());
                TipoDocCB.setSelectedItem(aprendiz.getTipoDocumento());
                ResultadoNombres.setText(aprendiz.getNombres());
                ResultadoApellidos.setText(aprendiz.getApellidos());
                ResultadoCorreo.setText(aprendiz.getCorreo());
                ResultadoTelefono.setText(aprendiz.getTelefono());
                ResultadoProgramaFormacion.setText(aprendiz.getProgramaFormacion());
                ResultadoNivelFormacion.setText(aprendiz.getNivelFormacion());
                ResultadoJornadaFormacion.setText(aprendiz.getJornadaFormacion());
                ResultadoSede.setText(aprendiz.getSede());
                ResultadoArea.setText(aprendiz.getArea());

                // Fecha de nacimiento: ajustar YearCB, MesCB, DiaCB
                Date fechaNacimiento = aprendiz.getFechaNacimiento();

                if (fechaNacimiento != null) {
                    // Usar LocalDate para extraer el a√±o, mes y d√≠a
                    LocalDate fecha = fechaNacimiento.toLocalDate();
                    int anho = fecha.getYear();
                    int mes = fecha.getMonthValue();  // De 1 a 12
                    int dia = fecha.getDayOfMonth();

                    // Setear YearCB
                    YearCB.setSelectedItem(String.valueOf(anho));

                    // Mapear el n√∫mero del mes al nombre del mes
                    String[] mesesNombres = {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"};
                    String nombreMes = mesesNombres[mes - 1];  // Restamos 1 para que coincida con el √≠ndice

                    // Setear MesCB al nombre del mes
                    MesCB.setSelectedItem(nombreMes);

                    // Setear DiaCB
                    DiaCB.setSelectedItem(String.valueOf(dia));  // Aseg√∫rate de que los d√≠as en DiaCB est√©n como n√∫meros sin ceros a la izquierda
                }

                // G√©nero
                GeneroCB.setSelectedItem(aprendiz.getGenero());

                // Residencia (descomponer en departamento, municipio y barrio si es necesario)
                String[] residencia = aprendiz.getResidencia().split(" - ");
                if (residencia.length == 3) {
                    DepartamentoCB.setSelectedItem(residencia[0]);
                    MunicipioCB.setSelectedItem(residencia[1]);
                    BarrioCB.setSelectedItem(residencia[2]);
                }

                // N√∫mero de ficha
                FichaCB.setSelectedItem(String.valueOf(aprendiz.getFicha()));

            } else {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ el usuario con el documento proporcionado.");
            }
        } catch (Exception e) {
            System.out.println("Ocurri√≥ una excepci√≥n:");
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al buscar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BuscarDatosUsuarioActionPerformed

    private void ResultadoNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResultadoNombresKeyTyped
                                   char caracter = evt.getKeyChar();

            // Permitir solo letras y las teclas de control (como backspace)
            if (!Character.isLetter(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
                evt.consume();  // Evitar que se ingrese el car√°cter no v√°lido
                JOptionPane.showMessageDialog(this, "Solo se permiten letras.");
            }
    }//GEN-LAST:event_ResultadoNombresKeyTyped

    private void ResultadoApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResultadoApellidosKeyTyped
                                  char caracter = evt.getKeyChar();

            // Permitir solo letras y las teclas de control (como backspace)
            if (!Character.isLetter(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
                evt.consume();  // Evitar que se ingrese el car√°cter no v√°lido
                JOptionPane.showMessageDialog(this, "Solo se permiten letras.");
            }
    }//GEN-LAST:event_ResultadoApellidosKeyTyped

    private void IDInstructorFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IDInstructorFieldKeyTyped
               char caracter = evt.getKeyChar();

        // Permitir solo n√∫meros y la tecla de retroceso
        if (!Character.isDigit(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
            evt.consume();  // Evitar que se ingrese el car√°cter no v√°lido
            JOptionPane.showMessageDialog(this, "Solo se permiten n√∫meros.");
        }
    }//GEN-LAST:event_IDInstructorFieldKeyTyped

    private void ResultadoDocumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResultadoDocumentoKeyTyped
                char caracter = evt.getKeyChar();

        // Permitir solo n√∫meros y la tecla de retroceso
        if (!Character.isDigit(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
            evt.consume();  // Evitar que se ingrese el car√°cter no v√°lido
            JOptionPane.showMessageDialog(this, "Solo se permiten n√∫meros.");
        }
    }//GEN-LAST:event_ResultadoDocumentoKeyTyped

    private void ResultadoTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ResultadoTelefonoKeyTyped
                char caracter = evt.getKeyChar();

        // Permitir solo n√∫meros y la tecla de retroceso
        if (!Character.isDigit(caracter) && caracter != KeyEvent.VK_BACK_SPACE) {
            evt.consume();  // Evitar que se ingrese el car√°cter no v√°lido
            JOptionPane.showMessageDialog(this, "Solo se permiten n√∫meros.");
        }
    }//GEN-LAST:event_ResultadoTelefonoKeyTyped

    private void RefrescarCombosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefrescarCombosActionPerformed
        refrescarComboBoxes();
    }//GEN-LAST:event_RefrescarCombosActionPerformed


    public void refrescarComboBoxes() {
        try {
            ComboBoxModels cbm = new ComboBoxModels();
            // Actualizar los ComboBox con los modelos m√°s recientes
            ComboBoxModels CBModels = new ComboBoxModels();
            TipoDocCB.setModel(CBModels.generarComboBoxModelPorTipo("TipoDocumento"));
            GeneroCB.setModel(CBModels.generarComboBoxModelPorTipo("Genero"));
            MunicipioCB.setModel(CBModels.generarComboBoxModelPorTipo("Municipios"));
            DepartamentoCB.setModel(CBModels.generarComboBoxModelPorTipo("Departamentos"));
            BarrioCB.setModel(CBModels.generarComboBoxModelPorTipo("Barrios"));
            FichaCB.setModel(CBModels.generarComboBoxModelPorTipo("Fichas"));
            YearCB.setModel(yearModel);
            MesCB.setModel(mesModel);
            DiaCB.setModel(diaModel);

            JOptionPane.showMessageDialog(this, "Los ComboBox han sido actualizados correctamente.", "ComboBox Actualizados", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al refrescar los ComboBox: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BarrioCB;
    private javax.swing.JButton BuscarDatosUsuario;
    private javax.swing.JButton ConfirmarRegistroUsuario;
    private javax.swing.JPanel CreateAprendizSubPanel;
    private javax.swing.JComboBox<String> DepartamentoCB;
    private javax.swing.JComboBox<String> DiaCB;
    private javax.swing.JComboBox<String> FichaCB;
    private javax.swing.JComboBox<String> GeneroCB;
    private javax.swing.JTextField IDInstructorField;
    private javax.swing.JComboBox<String> MesCB;
    private javax.swing.JComboBox<String> MunicipioCB;
    private javax.swing.JButton RefrescarCombos;
    private javax.swing.JTextField ResultadoApellidos;
    private javax.swing.JTextField ResultadoArea;
    private javax.swing.JTextField ResultadoCorreo;
    private javax.swing.JTextField ResultadoDocumento;
    private javax.swing.JTextField ResultadoFechaHolder;
    private javax.swing.JTextField ResultadoHolder;
    private javax.swing.JTextField ResultadoJornadaFormacion;
    private javax.swing.JTextField ResultadoNivelFormacion;
    private javax.swing.JTextField ResultadoNombres;
    private javax.swing.JPasswordField ResultadoPass;
    private javax.swing.JTextField ResultadoProgramaFormacion;
    private javax.swing.JTextField ResultadoSede;
    private javax.swing.JTextField ResultadoTelefono;
    private javax.swing.JTextField ResultadoUsuario;
    private javax.swing.JComboBox<String> TipoDocCB;
    private javax.swing.JComboBox<String> YearCB;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
